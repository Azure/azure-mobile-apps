trigger:
  branches:
    include:
      - main
      - refs/tags/*
  tags:
    include:
      - '*'
  paths:
    include:
      - 'sdk/dotnet/*'
      - '.ci/*'
    exclude:
      - .github/*
      - .vscode/*
      - docs/*
      - samples/*
      - .gitignore
      - CODE_OF_CONDUCT.md
      - LICENSE.txt
      - README.md
      - SECURITY.md
      - SUPPORT.md

pr:
  branches:
    include:
      - main
  paths:
    include:
      - 'sdk/dotnet/*'
      - '.ci/*'
    exclude:
      - .github/*
      - .vscode/*
      - docs/*
      - samples/*
      - .gitignore
      - CODE_OF_CONDUCT.md
      - LICENSE.txt
      - README.md
      - SECURITY.md
      - SUPPORT.md

pool:
  name: 'MAUI-DevDiv'

variables:
  buildConfiguration: 'Release'
  netSdkPath: 'sdk/dotnet'
  AREA_PATH: 'DevDiv\Xamarin SDK'
  BASE_VERSION: 5.0.0
  PREVIEW_LABEL: 'preview'
  BUILD_NUMBER: $[counter(format('{0}_{1}_{2}', variables['BASE_VERSION'], variables['PREVIEW_LABEL'], variables['Build.SourceBranch']), 1)]
  NUGET_VERSION: $[format('{0}-{1}.{2}', variables['BASE_VERSION'], variables['PREVIEW_LABEL'], variables['BUILD_NUMBER'])]

resources:
  repositories:
    - repository: internal-templates
      type: github
      name: xamarin/yaml-templates
      endpoint: xamarin

stages:
  - stage: setup
    displayName: Configure Pipeline
    jobs:
      - job: configbuildnumber
        displayName: Configure Build number
        steps:
          - pwsh: |
              $pr = "pr." + $env:SYSTEM_PULLREQUEST_PULLREQUESTNUMBER
              $nuget = $env:BASE_VERSION + "-" + $pr + "." + $env:BUILD_NUMBER
              Write-Host "Preview label: $pr"
              Write-Host "NuGet version: $nuget"
              Write-Host "##vso[task.setvariable variable=PREVIEW_LABEL]$pr"
              Write-Host "##vso[task.setvariable variable=NUGET_VERSION]$nuget"
            displayName: Override version for PRs
            condition: eq(variables['Build.Reason'], 'PullRequest')

          - pwsh: |
              $tagVersion = $env:BUILD_SOURCEBRANCHNAME
              Write-Host "Tag version: $tagVersion"
              Write-Host "##vso[task.setvariable variable=NUGET_VERSION]$tagVersion"
            displayName: Override version for tags
            condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')

          - pwsh: |
              Write-Host "##vso[build.updatebuildnumber]$env:NUGET_VERSION"
            displayName: Update the build number with a more readable one 

  - stage: buildstage
    displayName: Build SDK
    jobs:
      - job: buildnetsdk
        displayName: Build .NET SDK
        steps:
          - template: modules/install-dotnet.yml
            parameters:
              project: '.\src\Microsoft.Datasync.Client\Microsoft.Datasync.Client.csproj'
              workingDirectory: $(netSdkPath)

          - task: MSBuild@1
            displayName: 'Build SDK'
            inputs:
              configuration: $(buildConfiguration)
              solution: '$(netSdkPath)/Datasync.Framework.sln'
              msBuildArguments: '/nologo /t:Restore;Build;Pack /p:PackageVersion=$(NUGET_VERSION) /p:Version=$(BASE_VERSION) /bl /clp:DisableConsoleColor;Verbosity:normal;PerformanceSummary /fl'

          - template: modules/copy-to-artifacts.yml
            parameters:
              artifact: 'build'
              displayName: 'Consolidate src build artifacts'
              sourceDirectory: '$(netSdkPath)/src'
              buildConfiguration: '$(buildConfiguration)'
              filter: '*Datasync*'

          - template: modules/copy-to-artifacts.yml
            parameters:
              artifact: 'test'
              displayName: 'Consolidate test build artifacts'
              sourceDirectory: '$(netSdkPath)/test'
              buildConfiguration: '$(buildConfiguration)'
              filter: '*Datasync*'

          - template: modules/copy-nuget-packages.yml
            parameters:
              sourceDirectory: '$(netSdkPath)/src'
              buildConfiguration: '$(buildConfiguration)'
          
          - task: PublishBuildArtifacts@1
            displayName: Publish SignList.xml
            inputs:
              pathtoPublish: '$(netSdkPath)/SignList.xml'
              artifactName: nuget

      - job: buildnettemplate
        displayName: Build .NET Core Template
        steps:
          - task: UseDotNet@2
            inputs:
              version: '6.0.x'
              performMultiLevelLookup: true

          - pwsh: |
              (Get-Content -path "Template.DatasyncServer.csproj.template") -replace "{NUGET_VERSION}", "$(NUGET_VERSION)" | Set-Content -Path "./Template.DatasyncServer.csproj"
            displayName: Generate csproj from template
            workingDirectory: '$(netSdkPath)/templates/Template.DatasyncServer'

          - pwsh: |
              dotnet pack DatasyncTemplates.csproj --configuration $(buildConfiguration) /p:PackageVersion=$(NUGET_VERSION)
            displayName: Build Template
            workingDirectory: '$(netSdkPath)/templates'

          - template: modules/copy-to-artifacts.yml
            parameters:
              artifact: 'build'
              displayName: 'Consolidate template build artifacts'
              sourceDirectory: '$(netSdkPath)/templates'
              buildConfiguration: '$(buildConfiguration)'
              filter: '*Datasync*'

          - template: modules/copy-nuget-packages.yml
            parameters:
              sourceDirectory: '$(netSdkPath)/templates'
              buildConfiguration: '$(buildConfiguration)' 

  - stage: teststage
    displayName: Test SDK
    dependsOn: [ 'buildstage' ]
    condition: succeeded()
    jobs:
      - job: unittestnetsdk
        displayName: Unit Tests
        steps:
          - template: modules/install-dotnet.yml
            parameters:
              project: '.\src\Microsoft.Datasync.Client\Microsoft.Datasync.Client.csproj'
              workingDirectory: $(netSdkPath)

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'test'
              targetPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download Test Assemblies'

          - pwsh: |
              Get-ChildItem '$(System.ArtifactsDirectory)' -Directory -Recurse | Write-Host
            displayName: 'Display Test Assemblies'

          - task: VSTest@2
            displayName: 'Run Unit Tests'
            inputs:
              testAssemblyVer2: |
                **\Microsoft.*.Test.dll
                !**\Microsoft.Datasync.Integration.Test.dll
                !**\obj\**
                !**\bin\**\ref\**
              searchFolder: '$(System.ArtifactsDirectory)'
              codeCoverageEnabled: true
              rerunFailedTests: true
              PublishTestResults: true
              configuration: $(buildConfiguration)

      - job: integrationtestnetsdk
        displayName: Integration Tests
        steps:
          - template: modules/install-dotnet.yml
            parameters:
              project: '.\src\Microsoft.Datasync.Client\Microsoft.Datasync.Client.csproj'
              workingDirectory: $(netSdkPath)

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'test'
              targetPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download Test Assemblies'

          - pwsh: |
              Get-ChildItem '$(System.ArtifactsDirectory)' -Directory -Recurse | Write-Host
            displayName: 'Display Test Assemblies'

          - task: VSTest@2
            displayName: 'Run Unit Tests'
            inputs:
              testAssemblyVer2: |
                **\Microsoft.Datasync.Integration.Test.dll
              searchFolder: '$(System.ArtifactsDirectory)'
              codeCoverageEnabled: true
              rerunFailedTests: true
              PublishTestResults: true
              configuration: $(buildConfiguration)

  - stage: signstage
    displayName: Sign SDK
    dependsOn: [ 'teststage' ]
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - template: sign-artifacts/jobs/v2.yml@internal-templates

  - stage: postbuild
    displayName: Postbuild Checks
    condition: eq('refs/heads/main', variables['Build.SourceBranch'])
    dependsOn: [ 'buildstage' ]
    jobs:
      - job: postbuild_checks
        displayName: 'Run required code checks'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '14.x'
              
          - pwsh: |
              $repo = "$(Build.Repository.Id)"
              $repo = $repo.Substring($repo.IndexOf("/") + 1)
              $branch = "main"
              $CODEBASE_NAME = $repo + "_" + $branch
              echo "Using codebase: $CODEBASE_NAME"
              Write-Host "##vso[task.setvariable variable=CODEBASE_NAME]$CODEBASENAME"

          - task: CredScan@2
            inputs:
              toolMajorVersion: 'V2'

          - task: PoliCheck@1
            inputs:
              inputType: 'Basic'
              targetType: 'F'

          - task: SdtReport@1
            displayName: 'Create security analysis report'
            inputs:
              AllTools: false
              APIScan: false
              BinSkim: false
              CodesignValidation: false
              CredScan: true
              FortifySCA: false
              FxCop: false
              ModernCop: false
              MSRD: false
              PoliCheck: true
              RoslynAnalyzers: false
              SDLNativeRules: false
              Semmle: false
              TSLint: false
              ToolLogsNotFoundAction: 'Standard'

          - task: PublishSecurityAnalysisLogs@3
            displayName: 'Publish security analysis logs'

  - stage: releasestage
    displayName: Release SDK
    dependsOn: [ 'signstage' ]
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    jobs:
      - job: update_github_release
        displayName: Update GitHub Releases
        steps:
          - pwsh: |
              $tagVersion = $env:BUILD_SOURCEBRANCHNAME
              Write-Host "Tag version: $tagVersion"
              Write-Host "##vso[task.setvariable variable=githubReleaseVersion]$tagVersion"
            displayName: Get Release Name on GitHub
            
          - pwsh: |
              New-Item -Path '$(Build.ArtifactStagingDirectory)/nuget' -Type Directory -Force
            displayName: Set up environment

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'nuget-signed'
              path: '$(Build.ArtifactStagingDirectory)/nuget'
            displayName: Download Signed NuGet Packages

          - task: GitHubRelease@1
            inputs:
              gitHubConnection: github-adhal-azure-mobile-apps
              repositoryName: 'azure/azure-mobile-apps'
              tag: $(githubReleaseVersion)
              action: 'edit'
              assets: $(Build.ArtifactStagingDirectory)/nuget/*.nupkg
