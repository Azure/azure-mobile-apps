trigger:
  - main
  - refs/tags/*

pr:
  - main

pool:
  vmImage: 'windows-2019'

variables:
  buildConfiguration: 'Release'
  netSdkPath: 'sdk/dotnet'
  AREA_PATH: 'DevDiv\Xamarin SDK'
  BASE_VERSION: 5.0.0
  PREVIEW_LABEL: 'preview'
  BUILD_NUMBER: $[counter(format('{0}_{1}_{2}', variables['BASE_VERSION'], variables['PREVIEW_LABEL'], variables['Build.SourceBranch']), 1)]
  NUGET_VERSION: $[format('{0}-{1}.{2}', variables['BASE_VERSION'], variables['PREVIEW_LABEL'], variables['BUILD_NUMBER'])]
  netSdkSolution: '$(netSdkPath)/Datasync.Framework.sln'
  netTemplateDirectory: '$(netSdkPath)/templates'
  msBuildArguments: '/nologo /bl /clp:DisableConsoleColor;Verbosity:normal;PerformanceSummary /fl'
  msBuildVersionArgs: '/p:PackageVersion=$(NUGET_VERSION) /p:Version=$(BASE_VERSION)'

resources:
  repositories:
    - repository: internal-templates
      type: github
      name: xamarin/yaml-templates
      endpoint: xamarin

stages:
  - stage: build
    displayName: Build SDK Artifacts
    jobs:
      - job: build_dotnet
        displayName: Build .NET SDK Artifacts
        steps:
          - task: UseDotNet@2
            inputs:
              version: '5.0.x'
              performMultiLevelLookup: true

          - task: NuGetToolInstaller@1
            inputs:
              checkLatest: true

          - pwsh: |
              $pr = "pr." + $env:SYSTEM_PULLREQUEST_PULLREQUESTNUMBER
              $nuget = $env:BASE_VERSION + "-" + $pr + "." + $env:BUILD_NUMBER
              Write-Host "Preview label: $pr"
              Write-Host "NuGet version: $nuget"
              Write-Host "##vso[task.setvariable variable=PREVIEW_LABEL]$pr"
              Write-Host "##vso[task.setvariable variable=NUGET_VERSION]$nuget"
            displayName: Override version for PRs
            condition: eq(variables['Build.Reason'], 'PullRequest')

          - pwsh: |
              $tagVersion = $env:BUILD_SOURCEBRANCHNAME
              Write-Host "Tag version: $tagVersion"
              Write-Host "##vso[task.setvariable variable=NUGET_VERSION]$tagVersion"
            displayName: Override version for releases
            condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')

          - pwsh: |
              Write-Host "##vso[build.updatebuildnumber]$env:NUGET_VERSION"
            displayName: Update the build number to match version

          - task: MSBuild@1
            inputs:
              configuration: $(buildConfiguration)
              solution: $(netSdkSolution)
              msBuildArguments: '/t:Restore $(msBuildArguments)'
            displayName: Restore NuGet Packages

          - task: MSBuild@1
            inputs:
              configuration: $(buildConfiguration)
              solution: $(netSdkSolution)
              msBuildArguments: '/t:Build $(msBuildVersionArgs) $(msBuildArguments)'
            displayName: Build .NET SDK

          - publish: '$(netSdkPath)'
            artifact: 'build-netsdk'
            displayName: Upload build artifacts

          - task: VSTest@2
            inputs:
              testAssemblyVer2: |
                **\Microsoft.*.Test.dll
                !**\obj\**
                !**\bin\**\ref\**
              searchFolder: $(netSdkPath)
              codeCoverageEnabled: true
              configuration: $(buildConfiguration)
            displayName: 'Run Unit Tests'

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: xUnit
              testResultsFiles: 'TestResults\**'
              searchFolder: $(netSdkPath)
              configuration: $(buildConfiguration)
            displayName: 'Publish Test Results'

          - task: MSBuild@1
            inputs:
              configuration: $(buildConfiguration)
              solution: $(netSdkSolution)
              msBuildArguments: '/t:Pack $(msBuildVersionArgs) $(msBuildArguments)'
            displayName: 'Create NuGet Packages'

          - pwsh: |
              dotnet pack DatasyncTemplates.csproj --configuration $(buildConfiguration) /p:PackageVersion=$(NUGET_VERSION)
            workingDirectory: $(netTemplateDirectory)
            displayName: Pack .NET Template Project

          - pwsh: |
              New-Item -Path '$(Build.ArtifactStagingDirectory)/nuget' -ItemType Directory -Force
              Get-ChildItem -Path '$(netSdkPath)/src' -Directory -Recurse | Where-Object { $_.FullName -match "\\bin\\Release$" } | Foreach-Object {
                $directory = $_.FullName
                Get-ChildItem -Path $directory -Include @( "*.nupkg", "*.nuspec" ) -File -Recurse | %{
                  Write-Host "Copy-Item -Path $_ -Destination $(Build.ArtifactStagingDirectory)\nuget"
                  Copy-Item -Verbose -Path $_ -Destination '$(Build.ArtifactStagingDirectory)\nuget'
                }
              }
              Copy-Item -Path '$(netSdkPath)/SignList.xml' -Destination '$(Build.ArtifactStagingDirectory)/nuget'
            displayName: Create NuGet Package Artifacts

          - publish: '$(Build.ArtifactStagingDirectory)/nuget'
            artifact: nuget
          - pwsh: |
              Get-ChildItem -Path $(Build.ArtifactStagingDirectory) -Recurse
            displayName: Show Artifact Staging Area

          - publish: '$(Build.ArtifactStagingDirectory)/build'
            artifact: 'build'
            displayName: Upload build Artifacts

          - publish: '$(Build.ArtifactStagingDirectory)/nuget'
            artifact: 'nuget'
            displayName: Upload NuGet artifacts

  - stage: postbuild
    displayName: Postbuild Checks
    dependsOn: [ 'build' ]
    jobs:
      - job: postbuild_checks
        displayName: 'Run required code checks'
        steps:
          - pwsh: |
              $repo = "$(Build.Repository.Id)"
              $repo = $repo.Substring($repo.IndexOf("/") + 1)
              $branch = "main"
              $CODEBASE_NAME = $repo + "_" + $branch
              echo "Using codebase: $CODEBASE_NAME"
              Write-Host "##vso[task.setvariable variable=CODEBASE_NAME]$CODEBASENAME"

          - task: CredScan@2
            inputs:
              toolMajorVersion: 'V2'

          - task: PoliCheck@1
            inputs:
              inputType: 'Basic'
              targetType: 'F'

          - task: SdtReport@1
            displayName: 'Create security analysis report'
            inputs:
              AllTools: false
              APIScan: false
              BinSkim: false
              CodesignValidation: false
              CredScan: true
              FortifySCA: false
              FxCop: false
              ModernCop: false
              MSRD: false
              PoliCheck: true
              RoslynAnalyzers: false
              SDLNativeRules: false
              Semmle: false
              TSLint: false
              ToolLogsNotFoundAction: 'Standard'

          - task: PublishSecurityAnalysisLogs@3
            displayName: 'Publish security analysis logs'

  - stage: sign
    displayName: Sign SDK
    dependsOn: [ 'build' ]
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    jobs:
      # .NET SDK Signing
      - template: sign-artifacts/jobs/v2.yml@internal-templates

  - stage: release
    displayName: Release
    dependsOn: [ 'sign' ]
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    jobs:
      - job: release_nuget
        displayName: Release NuGet Packages
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              path: $(Pipeline.Workspace)
              artifactName: 'nuget-signed'
            displayName: Download Signed NuGet Packages

          - pwsh: |
              Get-ChildItem -Path $(Pipeline.Workspace) -Recurse
            displayName: Show Signed NuGet Packages
