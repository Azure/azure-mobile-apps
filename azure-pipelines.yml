trigger:
  - main
  - refs/tags/*

pr:
  - main

pool:
  vmImage: 'windows-2019'

variables:
  buildConfiguration: 'Release'
  netSdkPath: 'sdk/dotnet'
  AREA_PATH: 'DevDiv\Xamarin SDK'
  BASE_VERSION: 5.0.0
  PREVIEW_LABEL: 'preview'
  BUILD_NUMBER: $[counter(format('{0}_{1}_{2}', variables['BASE_VERSION'], variables['PREVIEW_LABEL'], variables['Build.SourceBranch']), 1)]
  NUGET_VERSION: $[format('{0}-{1}.{2}', variables['BASE_VERSION'], variables['PREVIEW_LABEL'], variables['BUILD_NUMBER'])]

resources:
  repositories:
    - repository: internal-templates
      type: github
      name: xamarin/yaml-templates
      endpoint: xamarin

stages:
  - stage: build
    displayName: Build SDK
    jobs:
      - job: buildnetsdk
        displayName: Build .NET SDK
        steps:
          - template: .ci/prebuild.yml

          - task: MSBuild@1
            displayName: 'Build SDK'
            inputs:
              configuration: $(buildConfiguration)
              solution: '$(netSdkPath)/Datasync.Framework.sln'
              msBuildArguments: '/nologo /t:Restore;Build;Pack /p:PackageVersion=$(NUGET_VERSION) /p:Version=$(BASE_VERSION) /bl /clp:DisableConsoleColor;Verbosity:normal;PerformanceSummary /fl'

          - task: VSTest@2
            displayName: 'Run Unit Tests'
            inputs:
              testAssemblyVer2: |
                **\Microsoft.*.Test.dll
                !**\obj\**
                !**\bin\**\ref\**
              searchFolder: $(netSdkPath)
              codeCoverageEnabled: true
              configuration: $(buildConfiguration)

          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            inputs:
              testResultsFormat: xUnit
              testResultsFiles: 'TestResults\**'
              searchFolder: $(netSdkPath)
              configuration: $(buildConfiguration)

          - template: .ci/postbuild.yml
            parameters:
              sourceDirectory: '$(netSdkPath)/src'
              buildConfiguration: '$(buildConfiguration)'

      - job: buildnettemplate
        displayName: Build .NET Core Template
        steps:
          - template: .ci/prebuild.yml

          - pwsh: |
              dotnet pack DatasyncTemplates.csproj --configuration $(buildConfiguration) /p:PackageVersion=$(NUGET_VERSION)
            displayName: Build Template
            workingDirectory: '$(netSdkPath)/templates'

          - template: .ci/postbuild.yml
            parameters:
              sourceDirectory: '$(netSdkPath)/templates'
              buildConfiguration: '$(buildConfiguration)'

  - stage: postbuild
    displayName: Postbuild Checks
    condition: eq('refs/heads/main', variables['Build.SourceBranch'])
    dependsOn: [ 'build' ]
    jobs:
      - job: postbuild_checks
        displayName: 'Run required code checks'
        steps:
          - pwsh: |
              $repo = "$(Build.Repository.Id)"
              $repo = $repo.Substring($repo.IndexOf("/") + 1)
              $branch = "main"
              $CODEBASE_NAME = $repo + "_" + $branch
              echo "Using codebase: $CODEBASE_NAME"
              Write-Host "##vso[task.setvariable variable=CODEBASE_NAME]$CODEBASENAME"

          - task: CredScan@2
            inputs:
              toolMajorVersion: 'V2'

          - task: PoliCheck@1
            inputs:
              inputType: 'Basic'
              targetType: 'F'

          - task: SdtReport@1
            displayName: 'Create security analysis report'
            inputs:
              AllTools: false
              APIScan: false
              BinSkim: false
              CodesignValidation: false
              CredScan: true
              FortifySCA: false
              FxCop: false
              ModernCop: false
              MSRD: false
              PoliCheck: true
              RoslynAnalyzers: false
              SDLNativeRules: false
              Semmle: false
              TSLint: false
              ToolLogsNotFoundAction: 'Standard'

          - task: PublishSecurityAnalysisLogs@3
            displayName: 'Publish security analysis logs'

  - stage: sign
    displayName: Sign SDK
    dependsOn: [ 'build' ]
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
    jobs:
      - job: presign
        displayName: Pre-signing Tasks
        steps: 
        - task: PublishBuildArtifacts@1
          displayName: Publish SignList.xml
          inputs:
            pathtoPublish: '$(netSdkPath)/SignList.xml'
            artifactName: nuget
      - template: sign-artifacts/jobs/v2.yml@internal-templates

